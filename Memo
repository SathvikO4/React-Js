React Memo:
	• It is a high order component and is not a react hook
	• It will stop unnecessary rendering of functional components of its props
	• It will improve the performance of the functional components

App.js:

import React,{useState} from 'react';
import ChildA from './ChildA';
import ChildB from './ChildB';
const Parent = () => {
  const [count, setCount] = useState(0);
  const increment = () => {
    setCount(c=c+1);
  };
  return(
    <div>
      <ChildA/>
      <ChildB count={count} increment={increment}/>
    </div>
  )
}
export default Parent;

ChildA.js: (without memo)

const ChildA = () => {
    console.log("ChildA rendered");
    return <h2>This is Child A</h2>
}
export default ChildA;

ChildB.js: (without memo)


const ChildB = ({count, increment}) => {
  console.log("ChildB rendered");
  return(
    <div>
      <h1>Child B</h1>
      <h2>Count: {count}</h2>
      <button onClick={increment}>Increment</button>
    </div>
  )
}
export default ChildB;

ChildB.js: (with memo)
import React from "react";
import { memo } from "react";
const ChildB = ({count, increment}) => {
  console.log("ChildB rendered");
  return(
    <div>
      <h2>Count: {count}</h2>
      <button onClick={increment}>Increment</button>
    </div>
  )
}
export default memo(ChildB);

Whenever we click on the button (increment) in ChildB both ChildA and ChildB will get rendered because the parent component re-renders
